<?php
/**
 * @var \Swarming\SubscribePro\Block\Cart\ApplePay $block
 * @var \Magento\Framework\Escaper $escaper
 */
?>
<div class="subscriber-pro-apple-pay-button-container" style="display:none;">
    <div class="apple-pay-button" style="-webkit-appearance: -apple-pay-button;
    -apple-pay-button-type: plain;
    -apple-pay-button-style: black;
    border-top-left-radius: 3px; border-top-right-radius: 3px;
    border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;
    height: 45px;
    width: 100%;
    display: block;"
         lang=en></div>
</div>
<script type="application/javascript">
require([
    'jquery',
], function ($) {
    $(function () { // to ensure that code evaluates on page load
        var container = $('#maincontent');

        var subscribeProApplePayConfig = {
            createSessionUrl: '<?php echo $escaper->escapeHtml($block->getCreateSessionUrl()); ?>',
            merchantDomainName: '<?php echo $escaper->escapeHtml($block->getMerchantDomainName()); ?>',
            apiAccessToken: '<?php echo $escaper->escapeHtml($block->getApiAccessToken()) ?>',
            paymentRequest: <?php echo /* @noEscape */$block->getApplePayPaymentRequest() ?>,
            onShippingContactSelectedUrl: '<?php echo $escaper->escapeHtml($block->getShippingSelectedUrl()); ?>',
            onShippingMethodSelectedUrl: '<?php echo $escaper->escapeHtml($block->onShippingMethodSelected()); ?>',
            onPaymentAuthorizedUrl: '<?php echo $escaper->escapeHtml($block->getPaymentAuthorizedUrl()); ?>',
        }

        var subscribeProApplePay = {
            config: {
                merchantDomainName: '',
                apiAccessToken: '',
                paymentRequest: {},
                applePayBtn: '',
                createSessionUrl: '',
                onShippingContactSelectedUrl: '',
                onShippingMethodSelectedUrl: '',
                onPaymentAuthorizedUrl: ''
            },
            init: function (config) {
                // Save config
                this.config = config;
                // Show button(s)
                this.showApplePayButtons();
            },
            showApplePayButtons:  function () {
                // Check if user has Apple Pay and canMakePayments
                if (window.ApplePaySession) {
                    if (ApplePaySession.canMakePayments) {
                        $('.subscriber-pro-apple-pay-button-container')
                            .click(this.onApplePayButtonClicked.bind(this))
                            .show();
                    }
                }
            },
            onApplePayButtonClicked: function() {
                var self = this,
                    displayName = self.displayName;

                // Pre-configured paymentRequest
                const paymentRequest = self.config.paymentRequest;

                if (!displayName) {
                    displayName = 'MERCHANT';
                }

                // Set merchant display name
                paymentRequest.total = self.replaceTotalLabel(paymentRequest.total, displayName);

                // Create session object
                const session = new ApplePaySession(1, paymentRequest);

                // Call Merchant Validation
                session.onvalidatemerchant = function (event) {
                    // Requests an Apple Pay merchant session from Subscribe Pro platform and returns a promise.
                    jQuery.ajax({
                        url: self.config.createSessionUrl,
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        crossDomain: true,
                        headers: {
                            'Authorization': 'Bearer ' + self.config.apiAccessToken
                        },
                        data: JSON.stringify({
                            url: event.validationURL,
                            merchantDomainName: self.config.merchantDomainName,
                        }),
                        success: function (data, textStatus, jqXHR) {
                            // Save display name
                            self.displayName = data.displayName;
                            // Complete validation
                            session.completeMerchantValidation(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error(errorThrown);
                            session.abort();
                        }
                    });
                };

                // New shipping contact was selected for payment sheet is init'd the first time
                session.onshippingcontactselected = function (event) {
                    // Fetch shipping methods when sheet shown and when new contact chosen
                    if (!self.config.onShippingContactSelectedUrl) {
                        console.error('Invalid shipping url');
                        session.abort();
                        return false;
                    }

                    jQuery.ajax({
                        url: self.config.onShippingContactSelectedUrl,
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({
                            shippingContact: event.shippingContact
                        }),
                        success: function (data, textStatus, jqXHR) {

                            if (!data.success) {
                                if (data.errorCode && data.errorCode.length) {
                                    let ApplePayShippingContactUpdate = {
                                        status: ApplePaySession.STATUS_FAILURE,
                                        newShippingMethods: data.newShippingMethods,
                                        newLineItems: data.newLineItems,
                                        newTotal: self.replaceTotalLabel(data.newTotal, self.displayName),
                                        errors: []
                                    };

                                    ApplePayShippingContactUpdate.errors.push(
                                        new ApplePayError(
                                            data.errorCode ,
                                            data.contactField,
                                            data.message
                                        )
                                    );

                                    session.completeShippingContactSelection(ApplePayShippingContactUpdate);
                                } else {
                                    console.error(data);
                                }
                                return false;
                            }

                            session.completeShippingContactSelection(
                                ApplePaySession.STATUS_SUCCESS,
                                data.newShippingMethods,
                                self.replaceTotalLabel(data.newTotal, self.displayName),
                                data.newLineItems
                            );
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error(errorThrown);
                            session.abort();
                        }
                    });
                };

                /**
                 * Shipping Method Selection
                 * If the user changes their chosen shipping method we need to recalculate
                 * the total price. We can use the shipping method identifier to determine
                 * which method was selected.
                 */
                session.onshippingmethodselected = function (event) {
                    console.log(event);
                    // Fetch shipping methods when sheet shown and when new contact chosen
                    jQuery.ajax({
                        url: self.config.onShippingMethodSelectedUrl,
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({
                            shippingMethod: event.shippingMethod
                        }),
                        success: function (data, textStatus, jqXHR) {
                            console.log(data);
                            session.completeShippingMethodSelection(
                                ApplePaySession.STATUS_SUCCESS,
                                self.replaceTotalLabel(data.newTotal, self.displayName),
                                data.newLineItems);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            // console.error(errorThrown);
                            session.abort();
                        }
                    });
                };

                /**
                 * Payment Authorization
                 * Here you receive the encrypted payment data. You would then send it
                 * on to your payment provider for processing, and return an appropriate
                 * status in session.completePayment()
                 */
                session.onpaymentauthorized = function (event) {
                    console.log(event);
                    // debugger;
                    jQuery.ajax({
                        url: self.config.onPaymentAuthorizedUrl,
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({
                            payment: event.payment
                        }),
                        success: function (data, textStatus, jqXHR) {
                            console.log('--> onPaymentAuthorized');
                            console.log(data);
                            // Complete payment
                            session.completePayment(ApplePaySession.STATUS_SUCCESS);
                            // Redirect to success page
                            if (data.redirectUrl) {
                                window.location.href = data.redirectUrl;
                            } else {
                                console.log('No redirectUrl');
                                console.log(data);
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.log('--> onPaymentAuthorized: ERROR');
                            console.log(textStatus);
                            console.log(errorThrown);
                            session.abort();
                        }
                    });
                };

                // Start the Apple Pay session
                // All our handlers are setup
                session.begin();
            },
            /**
             * Helper method to replace label in total line item with Merchant Display Name
             *
             * @param total
             * @param label
             * @returns {{label: *, amount: *}}
             */
            replaceTotalLabel: function (total, label) {
                var newTotal = {
                    label: label,
                    amount: total.amount
                };
                if (total.type) {
                    newTotal.type = total.type;
                }

                return newTotal;
            }
        }

        subscribeProApplePay.init(subscribeProApplePayConfig);
    });
});
</script>
